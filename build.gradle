
plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group "com.jnngl"
archivesBaseName = "totalcomputers"
version '0.10.2b'

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://m2.dv8tion.net/releases' }
    maven { url = 'https://jnngl.com/repo' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT"
    implementation "io.netty:netty-all:4.1.77.Final"
    implementation "org.eclipse.jetty:jetty-server:11.0.9"
    implementation "org.eclipse.jetty:jetty-util:11.0.9"
    implementation "org.eclipse.jetty.aggregate:jetty-all-server:8.2.0.v20160908"
    implementation "org.java-websocket:Java-WebSocket:1.5.3"
    implementation platform("org.lwjgl:lwjgl-bom:3.3.1")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-windows-x86"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows-x86"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows-x86"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-windows-x86"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-linux"
    implementation "org.joml:joml:1.10.4"
    implementation "commons-io:commons-io:2.11.0"
    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "net.dv8tion:JDA:4.4.0_352"
    implementation "com.sedmelluq:lavaplayer:1.3.77"
    implementation "com.google.guava:guava:31.1-jre"
    implementation "com.jcraft:jzlib:1.1.3"
    implementation "com.jnngl:mapcolor:1.0.1-SNAPSHOT";
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

publishing {
    repositories {
        maven {
            url = "https://s01.oss.sonatype.org/content/repositories/releases/"
            credentials {
                username = project.properties['ossrhUsername']
                password = project.properties['ossrhPassword']+'#'
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.jnngl'
            artifactId = 'totalcomputers'
            version = '0.10.2b'
            from components.java

            pom {
                name = 'Total Computers'
                description = 'Computers in vanilla Minecraft | TotalOS SDK'
                url = 'https://jnngl.com/totalcomputers'

                scm {
                    connection = 'scm:git:https://github.com/JNNGL/TotalComputers.git'
                    developerConnection = 'scm:git:https://github.com/JNNGL/TotalComputers.git'
                    url = 'https://github.com/JNNGL/TotalComputers'
                }

                licenses {
                    license {
                        name = 'The GNU General Public License, Version 3'
                        url = 'https://raw.githubusercontent.com/JNNGL/TotalComputers/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'jnngl'
                        name = 'JNNGL'
                        email = 'jnngles@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}
tasks.withType(Sign) {
    onlyIf { project.properties['tcmp_sign'] == 'true' }
}